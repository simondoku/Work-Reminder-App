{"version":3,"sources":["WorkReminderApp.js","App.js","index.js"],"names":["colors","WorkReminderApp","workdays","setWorkdays","useState","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","workTitle","setWorkTitle","reminderTime","setReminderTime","reminders","setReminders","dismissedReminders","setDismissedReminders","currentTime","setCurrentTime","Date","isReminderActive","setIsReminderActive","useEffect","timer","setInterval","clearInterval","savedWorkdays","localStorage","getItem","savedReminderTime","savedIsActive","savedDismissed","savedWorkTitle","JSON","parse","savedReminders","initialReminders","day","time","message","id","setItem","stringify","activeReminder","find","reminder","today","toLocaleDateString","weekday","currentHour","getHours","currentMinute","getMinutes","reminderHour","reminderMinute","split","map","Number","Math","abs","includes","React","createElement","className","style","backgroundColor","color","year","month","date","toLocaleTimeString","hour","minute","formatTime","onClick","dismissReminder","Object","keys","key","toggleDay","substring","type","value","onChange","e","target","placeholder","borderColor","checked","toggleReminderActive","addReminder","days","filter","length","alert","trim","reminderMessage","newReminders","now","random","deleteReminder","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.61024d39.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Custom theme colors\nconst colors = {\n  lavender: '#E6E6FA',\n  lightLavender: '#F0E6FF',\n  darkLavender: '#9370DB',\n  sage: '#BCB88A',\n  lightSage: '#D1D9CE',\n  darkSage: '#8A9A5B',\n};\n\nconst WorkReminderApp = () => {\n  const [workdays, setWorkdays] = useState({\n    Monday: true,\n    Tuesday: true,\n    Wednesday: true,\n    Thursday: true,\n    Friday: true,\n    Saturday: false,\n    Sunday: false,\n  });\n  \n  const [workTitle, setWorkTitle] = useState('');\n  const [reminderTime, setReminderTime] = useState('08:00');\n  const [reminders, setReminders] = useState([]);\n  const [dismissedReminders, setDismissedReminders] = useState([]);\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isReminderActive, setIsReminderActive] = useState(true);\n  \n  useEffect(() => {\n    // Update current time every minute\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n    \n    return () => clearInterval(timer);\n  }, []);\n  \n  useEffect(() => {\n    // Load saved settings from localStorage\n    const savedWorkdays = localStorage.getItem('workdays');\n    const savedReminderTime = localStorage.getItem('reminderTime');\n    const savedIsActive = localStorage.getItem('isReminderActive');\n    const savedDismissed = localStorage.getItem('dismissedReminders');\n    const savedWorkTitle = localStorage.getItem('workTitle');\n    \n    if (savedWorkdays) setWorkdays(JSON.parse(savedWorkdays));\n    if (savedReminderTime) setReminderTime(savedReminderTime);\n    if (savedIsActive) setIsReminderActive(JSON.parse(savedIsActive));\n    if (savedDismissed) setDismissedReminders(JSON.parse(savedDismissed));\n    if (savedWorkTitle) setWorkTitle(savedWorkTitle);\n    \n    // Load saved reminders\n    const savedReminders = localStorage.getItem('reminders');\n    if (savedReminders) {\n      setReminders(JSON.parse(savedReminders));\n    } else {\n      // Set initial demo reminders\n      const initialReminders = [\n        { day: 'Monday', time: '08:00', message: 'Time to go to work!', workTitle: 'Office', id: 1 },\n        { day: 'Tuesday', time: '08:00', message: 'Work day - don\\'t forget your lunch!', workTitle: 'Office', id: 2 },\n      ];\n      setReminders(initialReminders);\n      localStorage.setItem('reminders', JSON.stringify(initialReminders));\n    }\n  }, []);\n  \n  // Save settings to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('workdays', JSON.stringify(workdays));\n    localStorage.setItem('reminderTime', reminderTime);\n    localStorage.setItem('isReminderActive', JSON.stringify(isReminderActive));\n    localStorage.setItem('reminders', JSON.stringify(reminders));\n    localStorage.setItem('dismissedReminders', JSON.stringify(dismissedReminders));\n    localStorage.setItem('workTitle', workTitle);\n  }, [workdays, reminderTime, isReminderActive, reminders, dismissedReminders, workTitle]);\n  \n  const toggleDay = (day) => {\n    setWorkdays({\n      ...workdays,\n      [day]: !workdays[day]\n    });\n  };\n  \n  const handleWorkTitleChange = (e) => {\n    setWorkTitle(e.target.value);\n  };\n  \n  const handleTimeChange = (e) => {\n    setReminderTime(e.target.value);\n  };\n  \n  const toggleReminderActive = () => {\n    setIsReminderActive(!isReminderActive);\n  };\n  \n  const addReminder = () => {\n    const days = Object.keys(workdays).filter(day => workdays[day]);\n    \n    if (days.length === 0) {\n      alert('Please select at least one workday first.');\n      return;\n    }\n    \n    if (!workTitle.trim()) {\n      alert('Please enter what work you need to be reminded of.');\n      return;\n    }\n    \n    const reminderMessage = `Time to go to ${workTitle}!`;\n    \n    const newReminders = days.map(day => ({\n      day,\n      time: reminderTime,\n      message: reminderMessage,\n      workTitle: workTitle,\n      id: Date.now() + Math.random()\n    }));\n    \n    setReminders([...reminders, ...newReminders]);\n  };\n  \n  const deleteReminder = (id) => {\n    setReminders(reminders.filter(reminder => reminder.id !== id));\n  };\n  \n  const dismissReminder = (id) => {\n    setDismissedReminders([...dismissedReminders, id]);\n  };\n  \n  const formatDate = (date) => {\n    return date.toLocaleDateString('en-US', { \n      weekday: 'long', \n      year: 'numeric', \n      month: 'long', \n      day: 'numeric' \n    });\n  };\n  \n  const formatTime = (date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n  \n  // Check if there's an active reminder now\n  const activeReminder = reminders.find(reminder => {\n    const today = currentTime.toLocaleDateString('en-US', { weekday: 'long' });\n    const currentHour = currentTime.getHours();\n    const currentMinute = currentTime.getMinutes();\n    \n    const [reminderHour, reminderMinute] = reminder.time.split(':').map(Number);\n    \n    return reminder.day === today && \n           reminderHour === currentHour && \n           Math.abs(reminderMinute - currentMinute) < 5 &&\n           isReminderActive &&\n           !dismissedReminders.includes(reminder.id);\n  });\n  \n  return (\n    <div className=\"flex flex-col h-screen\" style={{ backgroundColor: colors.lightLavender }}>\n      {/* Header */}\n      <header className=\"p-4 text-center\" style={{ backgroundColor: colors.darkLavender, color: 'white' }}>\n        <h1 className=\"text-2xl font-bold\">Work Reminder</h1>\n      </header>\n      \n      {/* Current time and date */}\n      <div className=\"p-4 text-center\" style={{ backgroundColor: colors.lavender }}>\n        <p className=\"text-lg\">{formatDate(currentTime)}</p>\n        <p className=\"text-xl font-bold\">{formatTime(currentTime)}</p>\n      </div>\n      \n      {/* Main content */}\n      <div className=\"flex-1 p-4 overflow-auto\">\n        {/* Active reminder alert */}\n        {activeReminder && (\n          <div className=\"mb-6 p-4 rounded-lg animate-pulse relative\" style={{ backgroundColor: colors.darkSage, color: 'white' }}>\n            <button \n              className=\"absolute top-2 right-2 p-1 w-6 h-6 flex items-center justify-center rounded-full text-white text-sm\"\n              style={{ backgroundColor: 'rgba(0,0,0,0.3)' }}\n              onClick={() => dismissReminder(activeReminder.id)}\n            >\n              ✕\n            </button>\n            <h2 className=\"text-xl font-bold\">⏰ Reminder!</h2>\n            <p className=\"text-lg\">{activeReminder.message}</p>\n          </div>\n        )}\n        \n        {/* Settings panel */}\n        <div className=\"mb-6 p-4 rounded-lg\" style={{ backgroundColor: colors.lightSage }}>\n          <h2 className=\"text-lg font-bold mb-2\">Work Schedule</h2>\n          \n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {Object.keys(workdays).map(day => (\n              <button\n                key={day}\n                onClick={() => toggleDay(day)}\n                className=\"px-3 py-1 rounded-full text-sm\"\n                style={{\n                  backgroundColor: workdays[day] ? colors.darkSage : colors.lightLavender,\n                  color: workdays[day] ? 'white' : 'black',\n                }}\n              >\n                {day.substring(0, 3)}\n              </button>\n            ))}\n          </div>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <label className=\"text-sm\">What work:</label>\n            <input\n              type=\"text\"\n              value={workTitle}\n              onChange={handleWorkTitleChange}\n              placeholder=\"e.g., Office, Teaching, Hospital\"\n              className=\"px-2 py-1 rounded border flex-1\"\n              style={{ borderColor: colors.darkLavender }}\n            />\n          </div>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <label className=\"text-sm\">Reminder time:</label>\n            <input\n              type=\"time\"\n              value={reminderTime}\n              onChange={handleTimeChange}\n              className=\"px-2 py-1 rounded border\"\n              style={{ borderColor: colors.darkLavender }}\n            />\n          </div>\n          \n          <div className=\"flex items-center gap-2 mb-4\">\n            <label className=\"flex items-center cursor-pointer\">\n              <div className=\"relative\">\n                <input \n                  type=\"checkbox\" \n                  className=\"sr-only\" \n                  checked={isReminderActive} \n                  onChange={toggleReminderActive} \n                />\n                <div className=\"w-10 h-4 rounded-full bg-gray-300\"></div>\n                <div \n                  className={`absolute left-0 top-0 w-6 h-4 rounded-full transition ${isReminderActive ? 'transform translate-x-full' : ''}`}\n                  style={{ backgroundColor: isReminderActive ? colors.darkSage : colors.lightLavender }}\n                ></div>\n              </div>\n              <span className=\"ml-2 text-sm\">{isReminderActive ? 'Reminders active' : 'Reminders disabled'}</span>\n            </label>\n          </div>\n          \n          <button \n            onClick={addReminder}\n            className=\"px-4 py-2 rounded-lg text-white\"\n            style={{ backgroundColor: colors.darkLavender }}\n          >\n            Add Reminders\n          </button>\n        </div>\n        \n        {/* Reminders list */}\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: 'white' }}>\n          <h2 className=\"text-lg font-bold mb-2\">Your Reminders</h2>\n          \n          {reminders.length === 0 ? (\n            <p className=\"text-gray-500\">No reminders set. Add some above!</p>\n          ) : (\n            <div className=\"space-y-2\">\n              {reminders.map(reminder => (\n                <div \n                  key={reminder.id} \n                  className=\"p-3 rounded-lg flex justify-between items-center\"\n                  style={{ backgroundColor: colors.lightLavender }}\n                >\n                  <div>\n                    <p className=\"font-medium\">{reminder.day} at {reminder.time}</p>\n                    <p className=\"text-sm\">{reminder.message}</p>\n                  </div>\n                  <button \n                    onClick={() => deleteReminder(reminder.id)}\n                    className=\"p-1 rounded-full text-white\"\n                    style={{ backgroundColor: colors.darkLavender }}\n                  >\n                    ✕\n                  </button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Footer */}\n      <footer className=\"p-2 text-center text-sm\" style={{ backgroundColor: colors.sage, color: 'white' }}>\n        <p>Work Reminder App with Lavender & Sage Theme</p>\n        <p className=\"mt-1\">Made with love by Simon Doku</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default WorkReminderApp;","import React from 'react';\nimport './App.css';\nimport WorkReminderApp from './WorkReminderApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WorkReminderApp />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}